// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: subscription/v1/subscription.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SubscriptionInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscriptionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscriptionInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscriptionInfoMultiError, or nil if none found.
func (m *SubscriptionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscriptionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for Price

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscriptionInfoValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscriptionInfoValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscriptionInfoValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscriptionInfoValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscriptionInfoValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscriptionInfoValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return SubscriptionInfoMultiError(errors)
	}

	return nil
}

// SubscriptionInfoMultiError is an error wrapping multiple validation errors
// returned by SubscriptionInfo.ValidateAll() if the designated constraints
// aren't met.
type SubscriptionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscriptionInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscriptionInfoMultiError) AllErrors() []error { return m }

// SubscriptionInfoValidationError is the validation error returned by
// SubscriptionInfo.Validate if the designated constraints aren't met.
type SubscriptionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscriptionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscriptionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscriptionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscriptionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscriptionInfoValidationError) ErrorName() string { return "SubscriptionInfoValidationError" }

// Error satisfies the builtin error interface
func (e SubscriptionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscriptionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscriptionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscriptionInfoValidationError{}

// Validate checks the field values on Subscription with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Subscription) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Subscription with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubscriptionMultiError, or
// nil if none found.
func (m *Subscription) ValidateAll() error {
	return m.validate(true)
}

func (m *Subscription) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubscriptionId

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscriptionValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscriptionValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubscriptionMultiError(errors)
	}

	return nil
}

// SubscriptionMultiError is an error wrapping multiple validation errors
// returned by Subscription.ValidateAll() if the designated constraints aren't met.
type SubscriptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscriptionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscriptionMultiError) AllErrors() []error { return m }

// SubscriptionValidationError is the validation error returned by
// Subscription.Validate if the designated constraints aren't met.
type SubscriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscriptionValidationError) ErrorName() string { return "SubscriptionValidationError" }

// Error satisfies the builtin error interface
func (e SubscriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscriptionValidationError{}

// Validate checks the field values on CreateSubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubscriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubscriptionRequestMultiError, or nil if none found.
func (m *CreateSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSubscriptionRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSubscriptionRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSubscriptionRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSubscriptionRequestMultiError(errors)
	}

	return nil
}

// CreateSubscriptionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSubscriptionRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubscriptionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubscriptionRequestMultiError) AllErrors() []error { return m }

// CreateSubscriptionRequestValidationError is the validation error returned by
// CreateSubscriptionRequest.Validate if the designated constraints aren't met.
type CreateSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubscriptionRequestValidationError) ErrorName() string {
	return "CreateSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubscriptionRequestValidationError{}

// Validate checks the field values on CreateSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubscriptionResponseMultiError, or nil if none found.
func (m *CreateSubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubscriptionId

	if len(errors) > 0 {
		return CreateSubscriptionResponseMultiError(errors)
	}

	return nil
}

// CreateSubscriptionResponseMultiError is an error wrapping multiple
// validation errors returned by CreateSubscriptionResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateSubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubscriptionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubscriptionResponseMultiError) AllErrors() []error { return m }

// CreateSubscriptionResponseValidationError is the validation error returned
// by CreateSubscriptionResponse.Validate if the designated constraints aren't met.
type CreateSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubscriptionResponseValidationError) ErrorName() string {
	return "CreateSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubscriptionResponseValidationError{}

// Validate checks the field values on GetSubscriptionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubscriptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubscriptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubscriptionsRequestMultiError, or nil if none found.
func (m *GetSubscriptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubscriptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetSubscriptionsRequestMultiError(errors)
	}

	return nil
}

// GetSubscriptionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetSubscriptionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSubscriptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubscriptionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubscriptionsRequestMultiError) AllErrors() []error { return m }

// GetSubscriptionsRequestValidationError is the validation error returned by
// GetSubscriptionsRequest.Validate if the designated constraints aren't met.
type GetSubscriptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubscriptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubscriptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubscriptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubscriptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubscriptionsRequestValidationError) ErrorName() string {
	return "GetSubscriptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubscriptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubscriptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubscriptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubscriptionsRequestValidationError{}

// Validate checks the field values on GetSubscriptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubscriptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubscriptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubscriptionsResponseMultiError, or nil if none found.
func (m *GetSubscriptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubscriptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubscriptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSubscriptionsResponseValidationError{
						field:  fmt.Sprintf("Subscriptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSubscriptionsResponseValidationError{
						field:  fmt.Sprintf("Subscriptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSubscriptionsResponseValidationError{
					field:  fmt.Sprintf("Subscriptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSubscriptionsResponseMultiError(errors)
	}

	return nil
}

// GetSubscriptionsResponseMultiError is an error wrapping multiple validation
// errors returned by GetSubscriptionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSubscriptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubscriptionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubscriptionsResponseMultiError) AllErrors() []error { return m }

// GetSubscriptionsResponseValidationError is the validation error returned by
// GetSubscriptionsResponse.Validate if the designated constraints aren't met.
type GetSubscriptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubscriptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubscriptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubscriptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubscriptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubscriptionsResponseValidationError) ErrorName() string {
	return "GetSubscriptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubscriptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubscriptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubscriptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubscriptionsResponseValidationError{}

// Validate checks the field values on UpdateSubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubscriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSubscriptionRequestMultiError, or nil if none found.
func (m *UpdateSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubscriptionId

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSubscriptionRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSubscriptionRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSubscriptionRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSubscriptionRequestMultiError(errors)
	}

	return nil
}

// UpdateSubscriptionRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSubscriptionRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubscriptionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubscriptionRequestMultiError) AllErrors() []error { return m }

// UpdateSubscriptionRequestValidationError is the validation error returned by
// UpdateSubscriptionRequest.Validate if the designated constraints aren't met.
type UpdateSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubscriptionRequestValidationError) ErrorName() string {
	return "UpdateSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubscriptionRequestValidationError{}

// Validate checks the field values on DeleteSubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSubscriptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSubscriptionRequestMultiError, or nil if none found.
func (m *DeleteSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubscriptionId

	if len(errors) > 0 {
		return DeleteSubscriptionRequestMultiError(errors)
	}

	return nil
}

// DeleteSubscriptionRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSubscriptionRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSubscriptionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSubscriptionRequestMultiError) AllErrors() []error { return m }

// DeleteSubscriptionRequestValidationError is the validation error returned by
// DeleteSubscriptionRequest.Validate if the designated constraints aren't met.
type DeleteSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSubscriptionRequestValidationError) ErrorName() string {
	return "DeleteSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSubscriptionRequestValidationError{}

// Validate checks the field values on GetTotalCostSubscriptionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTotalCostSubscriptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTotalCostSubscriptionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTotalCostSubscriptionsRequestMultiError, or nil if none found.
func (m *GetTotalCostSubscriptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTotalCostSubscriptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTotalCostSubscriptionsRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTotalCostSubscriptionsRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTotalCostSubscriptionsRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTotalCostSubscriptionsRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTotalCostSubscriptionsRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTotalCostSubscriptionsRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTotalCostSubscriptionsRequestMultiError(errors)
	}

	return nil
}

// GetTotalCostSubscriptionsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetTotalCostSubscriptionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTotalCostSubscriptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTotalCostSubscriptionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTotalCostSubscriptionsRequestMultiError) AllErrors() []error { return m }

// GetTotalCostSubscriptionsRequestValidationError is the validation error
// returned by GetTotalCostSubscriptionsRequest.Validate if the designated
// constraints aren't met.
type GetTotalCostSubscriptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTotalCostSubscriptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTotalCostSubscriptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTotalCostSubscriptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTotalCostSubscriptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTotalCostSubscriptionsRequestValidationError) ErrorName() string {
	return "GetTotalCostSubscriptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTotalCostSubscriptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTotalCostSubscriptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTotalCostSubscriptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTotalCostSubscriptionsRequestValidationError{}

// Validate checks the field values on GetTotalCostSubscriptionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTotalCostSubscriptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTotalCostSubscriptionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetTotalCostSubscriptionsResponseMultiError, or nil if none found.
func (m *GetTotalCostSubscriptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTotalCostSubscriptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCost

	if len(errors) > 0 {
		return GetTotalCostSubscriptionsResponseMultiError(errors)
	}

	return nil
}

// GetTotalCostSubscriptionsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetTotalCostSubscriptionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTotalCostSubscriptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTotalCostSubscriptionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTotalCostSubscriptionsResponseMultiError) AllErrors() []error { return m }

// GetTotalCostSubscriptionsResponseValidationError is the validation error
// returned by GetTotalCostSubscriptionsResponse.Validate if the designated
// constraints aren't met.
type GetTotalCostSubscriptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTotalCostSubscriptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTotalCostSubscriptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTotalCostSubscriptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTotalCostSubscriptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTotalCostSubscriptionsResponseValidationError) ErrorName() string {
	return "GetTotalCostSubscriptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTotalCostSubscriptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTotalCostSubscriptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTotalCostSubscriptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTotalCostSubscriptionsResponseValidationError{}
